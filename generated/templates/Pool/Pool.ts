// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddLimitOrder extends ethereum.Event {
  get params(): AddLimitOrder__Params {
    return new AddLimitOrder__Params(this);
  }
}

export class AddLimitOrder__Params {
  _event: AddLimitOrder;

  constructor(event: AddLimitOrder) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get acquireAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get point(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get claimSold(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get claimEarn(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get sellXEarnY(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get leftPoint(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get rightPoint(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get liquidity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountX(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CollectLimitOrder extends ethereum.Event {
  get params(): CollectLimitOrder__Params {
    return new CollectLimitOrder__Params(this);
  }
}

export class CollectLimitOrder__Params {
  _event: CollectLimitOrder;

  constructor(event: CollectLimitOrder) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get point(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get collectDec(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collectEarn(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sellXEarnY(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class CollectLiquidity extends ethereum.Event {
  get params(): CollectLiquidity__Params {
    return new CollectLiquidity__Params(this);
  }
}

export class CollectLiquidity__Params {
  _event: CollectLiquidity;

  constructor(event: CollectLiquidity) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get leftPoint(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get rightPoint(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amountX(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DecLimitOrder extends ethereum.Event {
  get params(): DecLimitOrder__Params {
    return new DecLimitOrder__Params(this);
  }
}

export class DecLimitOrder__Params {
  _event: DecLimitOrder;

  constructor(event: DecLimitOrder) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get decreaseAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get point(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get claimSold(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get claimEarn(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sellXEarnY(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class Flash extends ethereum.Event {
  get params(): Flash__Params {
    return new Flash__Params(this);
  }
}

export class Flash__Params {
  _event: Flash;

  constructor(event: Flash) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountX(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get paidX(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get paidY(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get leftPoint(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get rightPoint(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get liquidity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountX(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get tokenX(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenY(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fee(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get sellXEarnY(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get amountX(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Pool__addLimOrderWithXResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOrderX(): BigInt {
    return this.value0;
  }

  getAcquireY(): BigInt {
    return this.value1;
  }
}

export class Pool__addLimOrderWithYResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOrderY(): BigInt {
    return this.value0;
  }

  getAcquireX(): BigInt {
    return this.value1;
  }
}

export class Pool__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class Pool__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getActualAmountX(): BigInt {
    return this.value0;
  }

  getActualAmountY(): BigInt {
    return this.value1;
  }
}

export class Pool__collectLimOrderResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getActualCollectDec(): BigInt {
    return this.value0;
  }

  getActualCollectEarn(): BigInt {
    return this.value1;
  }
}

export class Pool__decLimOrderWithXResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getActualDeltaX(): BigInt {
    return this.value0;
  }

  getLegacyAccEarn(): BigInt {
    return this.value1;
  }
}

export class Pool__decLimOrderWithYResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getActualDeltaY(): BigInt {
    return this.value0;
  }

  getLegacyAccEarn(): BigInt {
    return this.value1;
  }
}

export class Pool__limitOrderDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }

  getSellingX(): BigInt {
    return this.value0;
  }

  getEarnY(): BigInt {
    return this.value1;
  }

  getAccEarnY(): BigInt {
    return this.value2;
  }

  getLegacyAccEarnY(): BigInt {
    return this.value3;
  }

  getLegacyEarnY(): BigInt {
    return this.value4;
  }

  getSellingY(): BigInt {
    return this.value5;
  }

  getEarnX(): BigInt {
    return this.value6;
  }

  getLegacyEarnX(): BigInt {
    return this.value7;
  }

  getAccEarnX(): BigInt {
    return this.value8;
  }

  getLegacyAccEarnX(): BigInt {
    return this.value9;
  }
}

export class Pool__limitOrderSnapshotResultLimitOrdersStruct extends ethereum.Tuple {
  get sellingX(): BigInt {
    return this[0].toBigInt();
  }

  get earnY(): BigInt {
    return this[1].toBigInt();
  }

  get accEarnY(): BigInt {
    return this[2].toBigInt();
  }

  get sellingY(): BigInt {
    return this[3].toBigInt();
  }

  get earnX(): BigInt {
    return this[4].toBigInt();
  }

  get accEarnX(): BigInt {
    return this[5].toBigInt();
  }
}

export class Pool__liquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getLiquidity(): BigInt {
    return this.value0;
  }

  getLastFeeScaleX_128(): BigInt {
    return this.value1;
  }

  getLastFeeScaleY_128(): BigInt {
    return this.value2;
  }

  getTokenOwedX(): BigInt {
    return this.value3;
  }

  getTokenOwedY(): BigInt {
    return this.value4;
  }
}

export class Pool__mintResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class Pool__observationsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getAccPoint(): BigInt {
    return this.value1;
  }

  getInit(): boolean {
    return this.value2;
  }
}

export class Pool__pointsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getLiquidSum(): BigInt {
    return this.value0;
  }

  getLiquidDelta(): BigInt {
    return this.value1;
  }

  getAccFeeXOut_128(): BigInt {
    return this.value2;
  }

  getAccFeeYOut_128(): BigInt {
    return this.value3;
  }

  getIsEndpt(): boolean {
    return this.value4;
  }
}

export class Pool__stateResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: boolean;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: boolean,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getSqrtPrice_96(): BigInt {
    return this.value0;
  }

  getCurrentPoint(): i32 {
    return this.value1;
  }

  getObservationCurrentIndex(): i32 {
    return this.value2;
  }

  getObservationQueueLen(): i32 {
    return this.value3;
  }

  getObservationNextQueueLen(): i32 {
    return this.value4;
  }

  getLocked(): boolean {
    return this.value5;
  }

  getLiquidity(): BigInt {
    return this.value6;
  }

  getLiquidityX(): BigInt {
    return this.value7;
  }
}

export class Pool__swapX2YResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class Pool__swapX2YDesireYResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class Pool__swapY2XResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class Pool__swapY2XDesireXResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountX(): BigInt {
    return this.value0;
  }

  getAmountY(): BigInt {
    return this.value1;
  }
}

export class Pool__userEarnXResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getLastAccEarn(): BigInt {
    return this.value0;
  }

  getSellingRemain(): BigInt {
    return this.value1;
  }

  getSellingDec(): BigInt {
    return this.value2;
  }

  getEarn(): BigInt {
    return this.value3;
  }

  getLegacyEarn(): BigInt {
    return this.value4;
  }

  getEarnAssign(): BigInt {
    return this.value5;
  }
}

export class Pool__userEarnYResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getLastAccEarn(): BigInt {
    return this.value0;
  }

  getSellingRemain(): BigInt {
    return this.value1;
  }

  getSellingDec(): BigInt {
    return this.value2;
  }

  getEarn(): BigInt {
    return this.value3;
  }

  getLegacyEarn(): BigInt {
    return this.value4;
  }

  getEarnAssign(): BigInt {
    return this.value5;
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  addLimOrderWithX(
    recipient: Address,
    point: i32,
    amountX: BigInt,
    data: Bytes
  ): Pool__addLimOrderWithXResult {
    let result = super.call(
      "addLimOrderWithX",
      "addLimOrderWithX(address,int24,uint128,bytes):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(amountX),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Pool__addLimOrderWithXResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_addLimOrderWithX(
    recipient: Address,
    point: i32,
    amountX: BigInt,
    data: Bytes
  ): ethereum.CallResult<Pool__addLimOrderWithXResult> {
    let result = super.tryCall(
      "addLimOrderWithX",
      "addLimOrderWithX(address,int24,uint128,bytes):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(amountX),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__addLimOrderWithXResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  addLimOrderWithY(
    recipient: Address,
    point: i32,
    amountY: BigInt,
    data: Bytes
  ): Pool__addLimOrderWithYResult {
    let result = super.call(
      "addLimOrderWithY",
      "addLimOrderWithY(address,int24,uint128,bytes):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(amountY),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Pool__addLimOrderWithYResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_addLimOrderWithY(
    recipient: Address,
    point: i32,
    amountY: BigInt,
    data: Bytes
  ): ethereum.CallResult<Pool__addLimOrderWithYResult> {
    let result = super.tryCall(
      "addLimOrderWithY",
      "addLimOrderWithY(address,int24,uint128,bytes):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(amountY),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__addLimOrderWithYResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  assignLimOrderEarnX(
    point: i32,
    assignX: BigInt,
    fromLegacy: boolean
  ): BigInt {
    let result = super.call(
      "assignLimOrderEarnX",
      "assignLimOrderEarnX(int24,uint128,bool):(uint128)",
      [
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(assignX),
        ethereum.Value.fromBoolean(fromLegacy)
      ]
    );

    return result[0].toBigInt();
  }

  try_assignLimOrderEarnX(
    point: i32,
    assignX: BigInt,
    fromLegacy: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assignLimOrderEarnX",
      "assignLimOrderEarnX(int24,uint128,bool):(uint128)",
      [
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(assignX),
        ethereum.Value.fromBoolean(fromLegacy)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assignLimOrderEarnY(
    point: i32,
    assignY: BigInt,
    fromLegacy: boolean
  ): BigInt {
    let result = super.call(
      "assignLimOrderEarnY",
      "assignLimOrderEarnY(int24,uint128,bool):(uint128)",
      [
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(assignY),
        ethereum.Value.fromBoolean(fromLegacy)
      ]
    );

    return result[0].toBigInt();
  }

  try_assignLimOrderEarnY(
    point: i32,
    assignY: BigInt,
    fromLegacy: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assignLimOrderEarnY",
      "assignLimOrderEarnY(int24,uint128,bool):(uint128)",
      [
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(assignY),
        ethereum.Value.fromBoolean(fromLegacy)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(leftPt: i32, rightPt: i32, liquidDelta: BigInt): Pool__burnResult {
    let result = super.call(
      "burn",
      "burn(int24,int24,uint128):(uint256,uint256)",
      [
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(liquidDelta)
      ]
    );

    return new Pool__burnResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_burn(
    leftPt: i32,
    rightPt: i32,
    liquidDelta: BigInt
  ): ethereum.CallResult<Pool__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(int24,int24,uint128):(uint256,uint256)",
      [
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(liquidDelta)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__burnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collect(
    recipient: Address,
    leftPt: i32,
    rightPt: i32,
    amountXLim: BigInt,
    amountYLim: BigInt
  ): Pool__collectResult {
    let result = super.call(
      "collect",
      "collect(address,int24,int24,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(amountXLim),
        ethereum.Value.fromUnsignedBigInt(amountYLim)
      ]
    );

    return new Pool__collectResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_collect(
    recipient: Address,
    leftPt: i32,
    rightPt: i32,
    amountXLim: BigInt,
    amountYLim: BigInt
  ): ethereum.CallResult<Pool__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect(address,int24,int24,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(amountXLim),
        ethereum.Value.fromUnsignedBigInt(amountYLim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collectLimOrder(
    recipient: Address,
    point: i32,
    collectDec: BigInt,
    collectEarn: BigInt,
    isEarnY: boolean
  ): Pool__collectLimOrderResult {
    let result = super.call(
      "collectLimOrder",
      "collectLimOrder(address,int24,uint128,uint128,bool):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(collectDec),
        ethereum.Value.fromUnsignedBigInt(collectEarn),
        ethereum.Value.fromBoolean(isEarnY)
      ]
    );

    return new Pool__collectLimOrderResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collectLimOrder(
    recipient: Address,
    point: i32,
    collectDec: BigInt,
    collectEarn: BigInt,
    isEarnY: boolean
  ): ethereum.CallResult<Pool__collectLimOrderResult> {
    let result = super.tryCall(
      "collectLimOrder",
      "collectLimOrder(address,int24,uint128,uint128,bool):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(point),
        ethereum.Value.fromUnsignedBigInt(collectDec),
        ethereum.Value.fromUnsignedBigInt(collectEarn),
        ethereum.Value.fromBoolean(isEarnY)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__collectLimOrderResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  decLimOrderWithX(point: i32, deltaX: BigInt): Pool__decLimOrderWithXResult {
    let result = super.call(
      "decLimOrderWithX",
      "decLimOrderWithX(int24,uint128):(uint128,uint256)",
      [ethereum.Value.fromI32(point), ethereum.Value.fromUnsignedBigInt(deltaX)]
    );

    return new Pool__decLimOrderWithXResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_decLimOrderWithX(
    point: i32,
    deltaX: BigInt
  ): ethereum.CallResult<Pool__decLimOrderWithXResult> {
    let result = super.tryCall(
      "decLimOrderWithX",
      "decLimOrderWithX(int24,uint128):(uint128,uint256)",
      [ethereum.Value.fromI32(point), ethereum.Value.fromUnsignedBigInt(deltaX)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__decLimOrderWithXResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  decLimOrderWithY(point: i32, deltaY: BigInt): Pool__decLimOrderWithYResult {
    let result = super.call(
      "decLimOrderWithY",
      "decLimOrderWithY(int24,uint128):(uint128,uint256)",
      [ethereum.Value.fromI32(point), ethereum.Value.fromUnsignedBigInt(deltaY)]
    );

    return new Pool__decLimOrderWithYResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_decLimOrderWithY(
    point: i32,
    deltaY: BigInt
  ): ethereum.CallResult<Pool__decLimOrderWithYResult> {
    let result = super.tryCall(
      "decLimOrderWithY",
      "decLimOrderWithY(int24,uint128):(uint128,uint256)",
      [ethereum.Value.fromI32(point), ethereum.Value.fromUnsignedBigInt(deltaY)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__decLimOrderWithYResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fee(): i32 {
    let result = super.call("fee", "fee():(uint24)", []);

    return result[0].toI32();
  }

  try_fee(): ethereum.CallResult<i32> {
    let result = super.tryCall("fee", "fee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  feeChargePercent(): i32 {
    let result = super.call(
      "feeChargePercent",
      "feeChargePercent():(uint24)",
      []
    );

    return result[0].toI32();
  }

  try_feeChargePercent(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "feeChargePercent",
      "feeChargePercent():(uint24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  feeScaleX_128(): BigInt {
    let result = super.call("feeScaleX_128", "feeScaleX_128():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeScaleX_128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeScaleX_128",
      "feeScaleX_128():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeScaleY_128(): BigInt {
    let result = super.call("feeScaleY_128", "feeScaleY_128():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeScaleY_128(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeScaleY_128",
      "feeScaleY_128():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leftMostPt(): i32 {
    let result = super.call("leftMostPt", "leftMostPt():(int24)", []);

    return result[0].toI32();
  }

  try_leftMostPt(): ethereum.CallResult<i32> {
    let result = super.tryCall("leftMostPt", "leftMostPt():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  limitOrderData(param0: i32): Pool__limitOrderDataResult {
    let result = super.call(
      "limitOrderData",
      "limitOrderData(int24):(uint128,uint128,uint256,uint256,uint128,uint128,uint128,uint128,uint256,uint256)",
      [ethereum.Value.fromI32(param0)]
    );

    return new Pool__limitOrderDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_limitOrderData(
    param0: i32
  ): ethereum.CallResult<Pool__limitOrderDataResult> {
    let result = super.tryCall(
      "limitOrderData",
      "limitOrderData(int24):(uint128,uint128,uint256,uint256,uint128,uint128,uint128,uint128,uint256,uint256)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__limitOrderDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  limitOrderSnapshot(
    leftPoint: i32,
    rightPoint: i32
  ): Array<Pool__limitOrderSnapshotResultLimitOrdersStruct> {
    let result = super.call(
      "limitOrderSnapshot",
      "limitOrderSnapshot(int24,int24):((uint128,uint128,uint256,uint128,uint128,uint256)[])",
      [ethereum.Value.fromI32(leftPoint), ethereum.Value.fromI32(rightPoint)]
    );

    return result[0].toTupleArray<
      Pool__limitOrderSnapshotResultLimitOrdersStruct
    >();
  }

  try_limitOrderSnapshot(
    leftPoint: i32,
    rightPoint: i32
  ): ethereum.CallResult<
    Array<Pool__limitOrderSnapshotResultLimitOrdersStruct>
  > {
    let result = super.tryCall(
      "limitOrderSnapshot",
      "limitOrderSnapshot(int24,int24):((uint128,uint128,uint256,uint128,uint128,uint256)[])",
      [ethereum.Value.fromI32(leftPoint), ethereum.Value.fromI32(rightPoint)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Pool__limitOrderSnapshotResultLimitOrdersStruct>()
    );
  }

  liquidity(param0: Bytes): Pool__liquidityResult {
    let result = super.call(
      "liquidity",
      "liquidity(bytes32):(uint128,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Pool__liquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_liquidity(param0: Bytes): ethereum.CallResult<Pool__liquidityResult> {
    let result = super.tryCall(
      "liquidity",
      "liquidity(bytes32):(uint128,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__liquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  liquiditySnapshot(leftPoint: i32, rightPoint: i32): Array<BigInt> {
    let result = super.call(
      "liquiditySnapshot",
      "liquiditySnapshot(int24,int24):(int128[])",
      [ethereum.Value.fromI32(leftPoint), ethereum.Value.fromI32(rightPoint)]
    );

    return result[0].toBigIntArray();
  }

  try_liquiditySnapshot(
    leftPoint: i32,
    rightPoint: i32
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "liquiditySnapshot",
      "liquiditySnapshot(int24,int24):(int128[])",
      [ethereum.Value.fromI32(leftPoint), ethereum.Value.fromI32(rightPoint)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  maxLiquidPt(): BigInt {
    let result = super.call("maxLiquidPt", "maxLiquidPt():(uint128)", []);

    return result[0].toBigInt();
  }

  try_maxLiquidPt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxLiquidPt", "maxLiquidPt():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    recipient: Address,
    leftPt: i32,
    rightPt: i32,
    liquidDelta: BigInt,
    data: Bytes
  ): Pool__mintResult {
    let result = super.call(
      "mint",
      "mint(address,int24,int24,uint128,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(liquidDelta),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Pool__mintResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_mint(
    recipient: Address,
    leftPt: i32,
    rightPt: i32,
    liquidDelta: BigInt,
    data: Bytes
  ): ethereum.CallResult<Pool__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,int24,int24,uint128,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(leftPt),
        ethereum.Value.fromI32(rightPt),
        ethereum.Value.fromUnsignedBigInt(liquidDelta),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__mintResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  observations(param0: BigInt): Pool__observationsResult {
    let result = super.call(
      "observations",
      "observations(uint256):(uint32,int56,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Pool__observationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_observations(
    param0: BigInt
  ): ethereum.CallResult<Pool__observationsResult> {
    let result = super.tryCall(
      "observations",
      "observations(uint256):(uint32,int56,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__observationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  observe(secondsAgos: Array<BigInt>): Array<BigInt> {
    let result = super.call("observe", "observe(uint32[]):(int56[])", [
      ethereum.Value.fromUnsignedBigIntArray(secondsAgos)
    ]);

    return result[0].toBigIntArray();
  }

  try_observe(secondsAgos: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("observe", "observe(uint32[]):(int56[])", [
      ethereum.Value.fromUnsignedBigIntArray(secondsAgos)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  orderOrEndpoint(param0: i32): i32 {
    let result = super.call(
      "orderOrEndpoint",
      "orderOrEndpoint(int24):(int24)",
      [ethereum.Value.fromI32(param0)]
    );

    return result[0].toI32();
  }

  try_orderOrEndpoint(param0: i32): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "orderOrEndpoint",
      "orderOrEndpoint(int24):(int24)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  pointBitmap(param0: i32): BigInt {
    let result = super.call("pointBitmap", "pointBitmap(int16):(uint256)", [
      ethereum.Value.fromI32(param0)
    ]);

    return result[0].toBigInt();
  }

  try_pointBitmap(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pointBitmap", "pointBitmap(int16):(uint256)", [
      ethereum.Value.fromI32(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pointDelta(): i32 {
    let result = super.call("pointDelta", "pointDelta():(int24)", []);

    return result[0].toI32();
  }

  try_pointDelta(): ethereum.CallResult<i32> {
    let result = super.tryCall("pointDelta", "pointDelta():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  points(param0: i32): Pool__pointsResult {
    let result = super.call(
      "points",
      "points(int24):(uint128,int128,uint256,uint256,bool)",
      [ethereum.Value.fromI32(param0)]
    );

    return new Pool__pointsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_points(param0: i32): ethereum.CallResult<Pool__pointsResult> {
    let result = super.tryCall(
      "points",
      "points(int24):(uint128,int128,uint256,uint256,bool)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__pointsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  rightMostPt(): i32 {
    let result = super.call("rightMostPt", "rightMostPt():(int24)", []);

    return result[0].toI32();
  }

  try_rightMostPt(): ethereum.CallResult<i32> {
    let result = super.tryCall("rightMostPt", "rightMostPt():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  sqrtRate_96(): BigInt {
    let result = super.call("sqrtRate_96", "sqrtRate_96():(uint160)", []);

    return result[0].toBigInt();
  }

  try_sqrtRate_96(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sqrtRate_96", "sqrtRate_96():(uint160)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(): Pool__stateResult {
    let result = super.call(
      "state",
      "state():(uint160,int24,uint16,uint16,uint16,bool,uint128,uint128)",
      []
    );

    return new Pool__stateResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBoolean(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_state(): ethereum.CallResult<Pool__stateResult> {
    let result = super.tryCall(
      "state",
      "state():(uint160,int24,uint16,uint16,uint16,bool,uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__stateResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBoolean(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  swapX2Y(
    recipient: Address,
    amount: BigInt,
    lowPt: i32,
    data: Bytes
  ): Pool__swapX2YResult {
    let result = super.call(
      "swapX2Y",
      "swapX2Y(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromI32(lowPt),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Pool__swapX2YResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_swapX2Y(
    recipient: Address,
    amount: BigInt,
    lowPt: i32,
    data: Bytes
  ): ethereum.CallResult<Pool__swapX2YResult> {
    let result = super.tryCall(
      "swapX2Y",
      "swapX2Y(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromI32(lowPt),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__swapX2YResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  swapX2YDesireY(
    recipient: Address,
    desireY: BigInt,
    lowPt: i32,
    data: Bytes
  ): Pool__swapX2YDesireYResult {
    let result = super.call(
      "swapX2YDesireY",
      "swapX2YDesireY(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(desireY),
        ethereum.Value.fromI32(lowPt),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Pool__swapX2YDesireYResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapX2YDesireY(
    recipient: Address,
    desireY: BigInt,
    lowPt: i32,
    data: Bytes
  ): ethereum.CallResult<Pool__swapX2YDesireYResult> {
    let result = super.tryCall(
      "swapX2YDesireY",
      "swapX2YDesireY(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(desireY),
        ethereum.Value.fromI32(lowPt),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__swapX2YDesireYResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  swapY2X(
    recipient: Address,
    amount: BigInt,
    highPt: i32,
    data: Bytes
  ): Pool__swapY2XResult {
    let result = super.call(
      "swapY2X",
      "swapY2X(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromI32(highPt),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Pool__swapY2XResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_swapY2X(
    recipient: Address,
    amount: BigInt,
    highPt: i32,
    data: Bytes
  ): ethereum.CallResult<Pool__swapY2XResult> {
    let result = super.tryCall(
      "swapY2X",
      "swapY2X(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromI32(highPt),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__swapY2XResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  swapY2XDesireX(
    recipient: Address,
    desireX: BigInt,
    highPt: i32,
    data: Bytes
  ): Pool__swapY2XDesireXResult {
    let result = super.call(
      "swapY2XDesireX",
      "swapY2XDesireX(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(desireX),
        ethereum.Value.fromI32(highPt),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Pool__swapY2XDesireXResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapY2XDesireX(
    recipient: Address,
    desireX: BigInt,
    highPt: i32,
    data: Bytes
  ): ethereum.CallResult<Pool__swapY2XDesireXResult> {
    let result = super.tryCall(
      "swapY2XDesireX",
      "swapY2XDesireX(address,uint128,int24,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(desireX),
        ethereum.Value.fromI32(highPt),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__swapY2XDesireXResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  tokenX(): Address {
    let result = super.call("tokenX", "tokenX():(address)", []);

    return result[0].toAddress();
  }

  try_tokenX(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenX", "tokenX():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenY(): Address {
    let result = super.call("tokenY", "tokenY():(address)", []);

    return result[0].toAddress();
  }

  try_tokenY(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenY", "tokenY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalFeeXCharged(): BigInt {
    let result = super.call(
      "totalFeeXCharged",
      "totalFeeXCharged():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeeXCharged(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeXCharged",
      "totalFeeXCharged():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFeeYCharged(): BigInt {
    let result = super.call(
      "totalFeeYCharged",
      "totalFeeYCharged():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeeYCharged(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeYCharged",
      "totalFeeYCharged():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userEarnX(param0: Bytes): Pool__userEarnXResult {
    let result = super.call(
      "userEarnX",
      "userEarnX(bytes32):(uint256,uint128,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Pool__userEarnXResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_userEarnX(param0: Bytes): ethereum.CallResult<Pool__userEarnXResult> {
    let result = super.tryCall(
      "userEarnX",
      "userEarnX(bytes32):(uint256,uint128,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userEarnXResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  userEarnY(param0: Bytes): Pool__userEarnYResult {
    let result = super.call(
      "userEarnY",
      "userEarnY(bytes32):(uint256,uint128,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Pool__userEarnYResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_userEarnY(param0: Bytes): ethereum.CallResult<Pool__userEarnYResult> {
    let result = super.tryCall(
      "userEarnY",
      "userEarnY(bytes32):(uint256,uint128,uint128,uint128,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__userEarnYResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLimOrderWithXCall extends ethereum.Call {
  get inputs(): AddLimOrderWithXCall__Inputs {
    return new AddLimOrderWithXCall__Inputs(this);
  }

  get outputs(): AddLimOrderWithXCall__Outputs {
    return new AddLimOrderWithXCall__Outputs(this);
  }
}

export class AddLimOrderWithXCall__Inputs {
  _call: AddLimOrderWithXCall;

  constructor(call: AddLimOrderWithXCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get point(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amountX(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AddLimOrderWithXCall__Outputs {
  _call: AddLimOrderWithXCall;

  constructor(call: AddLimOrderWithXCall) {
    this._call = call;
  }

  get orderX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get acquireY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AddLimOrderWithYCall extends ethereum.Call {
  get inputs(): AddLimOrderWithYCall__Inputs {
    return new AddLimOrderWithYCall__Inputs(this);
  }

  get outputs(): AddLimOrderWithYCall__Outputs {
    return new AddLimOrderWithYCall__Outputs(this);
  }
}

export class AddLimOrderWithYCall__Inputs {
  _call: AddLimOrderWithYCall;

  constructor(call: AddLimOrderWithYCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get point(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amountY(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class AddLimOrderWithYCall__Outputs {
  _call: AddLimOrderWithYCall;

  constructor(call: AddLimOrderWithYCall) {
    this._call = call;
  }

  get orderY(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get acquireX(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class AssignLimOrderEarnXCall extends ethereum.Call {
  get inputs(): AssignLimOrderEarnXCall__Inputs {
    return new AssignLimOrderEarnXCall__Inputs(this);
  }

  get outputs(): AssignLimOrderEarnXCall__Outputs {
    return new AssignLimOrderEarnXCall__Outputs(this);
  }
}

export class AssignLimOrderEarnXCall__Inputs {
  _call: AssignLimOrderEarnXCall;

  constructor(call: AssignLimOrderEarnXCall) {
    this._call = call;
  }

  get point(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get assignX(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get fromLegacy(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AssignLimOrderEarnXCall__Outputs {
  _call: AssignLimOrderEarnXCall;

  constructor(call: AssignLimOrderEarnXCall) {
    this._call = call;
  }

  get actualAssignX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AssignLimOrderEarnYCall extends ethereum.Call {
  get inputs(): AssignLimOrderEarnYCall__Inputs {
    return new AssignLimOrderEarnYCall__Inputs(this);
  }

  get outputs(): AssignLimOrderEarnYCall__Outputs {
    return new AssignLimOrderEarnYCall__Outputs(this);
  }
}

export class AssignLimOrderEarnYCall__Inputs {
  _call: AssignLimOrderEarnYCall;

  constructor(call: AssignLimOrderEarnYCall) {
    this._call = call;
  }

  get point(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get assignY(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get fromLegacy(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AssignLimOrderEarnYCall__Outputs {
  _call: AssignLimOrderEarnYCall;

  constructor(call: AssignLimOrderEarnYCall) {
    this._call = call;
  }

  get actualAssignY(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get leftPt(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get rightPt(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get liquidDelta(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get leftPt(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rightPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get amountXLim(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountYLim(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get actualAmountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get actualAmountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectFeeChargedCall extends ethereum.Call {
  get inputs(): CollectFeeChargedCall__Inputs {
    return new CollectFeeChargedCall__Inputs(this);
  }

  get outputs(): CollectFeeChargedCall__Outputs {
    return new CollectFeeChargedCall__Outputs(this);
  }
}

export class CollectFeeChargedCall__Inputs {
  _call: CollectFeeChargedCall;

  constructor(call: CollectFeeChargedCall) {
    this._call = call;
  }
}

export class CollectFeeChargedCall__Outputs {
  _call: CollectFeeChargedCall;

  constructor(call: CollectFeeChargedCall) {
    this._call = call;
  }
}

export class CollectLimOrderCall extends ethereum.Call {
  get inputs(): CollectLimOrderCall__Inputs {
    return new CollectLimOrderCall__Inputs(this);
  }

  get outputs(): CollectLimOrderCall__Outputs {
    return new CollectLimOrderCall__Outputs(this);
  }
}

export class CollectLimOrderCall__Inputs {
  _call: CollectLimOrderCall;

  constructor(call: CollectLimOrderCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get point(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get collectDec(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get collectEarn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get isEarnY(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class CollectLimOrderCall__Outputs {
  _call: CollectLimOrderCall;

  constructor(call: CollectLimOrderCall) {
    this._call = call;
  }

  get actualCollectDec(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get actualCollectEarn(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DecLimOrderWithXCall extends ethereum.Call {
  get inputs(): DecLimOrderWithXCall__Inputs {
    return new DecLimOrderWithXCall__Inputs(this);
  }

  get outputs(): DecLimOrderWithXCall__Outputs {
    return new DecLimOrderWithXCall__Outputs(this);
  }
}

export class DecLimOrderWithXCall__Inputs {
  _call: DecLimOrderWithXCall;

  constructor(call: DecLimOrderWithXCall) {
    this._call = call;
  }

  get point(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get deltaX(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecLimOrderWithXCall__Outputs {
  _call: DecLimOrderWithXCall;

  constructor(call: DecLimOrderWithXCall) {
    this._call = call;
  }

  get actualDeltaX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get legacyAccEarn(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DecLimOrderWithYCall extends ethereum.Call {
  get inputs(): DecLimOrderWithYCall__Inputs {
    return new DecLimOrderWithYCall__Inputs(this);
  }

  get outputs(): DecLimOrderWithYCall__Outputs {
    return new DecLimOrderWithYCall__Outputs(this);
  }
}

export class DecLimOrderWithYCall__Inputs {
  _call: DecLimOrderWithYCall;

  constructor(call: DecLimOrderWithYCall) {
    this._call = call;
  }

  get point(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get deltaY(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecLimOrderWithYCall__Outputs {
  _call: DecLimOrderWithYCall;

  constructor(call: DecLimOrderWithYCall) {
    this._call = call;
  }

  get actualDeltaY(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get legacyAccEarn(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ExpandObservationQueueCall extends ethereum.Call {
  get inputs(): ExpandObservationQueueCall__Inputs {
    return new ExpandObservationQueueCall__Inputs(this);
  }

  get outputs(): ExpandObservationQueueCall__Outputs {
    return new ExpandObservationQueueCall__Outputs(this);
  }
}

export class ExpandObservationQueueCall__Inputs {
  _call: ExpandObservationQueueCall;

  constructor(call: ExpandObservationQueueCall) {
    this._call = call;
  }

  get newNextQueueLen(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ExpandObservationQueueCall__Outputs {
  _call: ExpandObservationQueueCall;

  constructor(call: ExpandObservationQueueCall) {
    this._call = call;
  }
}

export class FlashCall extends ethereum.Call {
  get inputs(): FlashCall__Inputs {
    return new FlashCall__Inputs(this);
  }

  get outputs(): FlashCall__Outputs {
    return new FlashCall__Outputs(this);
  }
}

export class FlashCall__Inputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountX(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashCall__Outputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get leftPt(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get rightPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get liquidDelta(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ModifyFeeChargePercentCall extends ethereum.Call {
  get inputs(): ModifyFeeChargePercentCall__Inputs {
    return new ModifyFeeChargePercentCall__Inputs(this);
  }

  get outputs(): ModifyFeeChargePercentCall__Outputs {
    return new ModifyFeeChargePercentCall__Outputs(this);
  }
}

export class ModifyFeeChargePercentCall__Inputs {
  _call: ModifyFeeChargePercentCall;

  constructor(call: ModifyFeeChargePercentCall) {
    this._call = call;
  }

  get newFeeChargePercent(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ModifyFeeChargePercentCall__Outputs {
  _call: ModifyFeeChargePercentCall;

  constructor(call: ModifyFeeChargePercentCall) {
    this._call = call;
  }
}

export class SwapX2YCall extends ethereum.Call {
  get inputs(): SwapX2YCall__Inputs {
    return new SwapX2YCall__Inputs(this);
  }

  get outputs(): SwapX2YCall__Outputs {
    return new SwapX2YCall__Outputs(this);
  }
}

export class SwapX2YCall__Inputs {
  _call: SwapX2YCall;

  constructor(call: SwapX2YCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lowPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapX2YCall__Outputs {
  _call: SwapX2YCall;

  constructor(call: SwapX2YCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapX2YDesireYCall extends ethereum.Call {
  get inputs(): SwapX2YDesireYCall__Inputs {
    return new SwapX2YDesireYCall__Inputs(this);
  }

  get outputs(): SwapX2YDesireYCall__Outputs {
    return new SwapX2YDesireYCall__Outputs(this);
  }
}

export class SwapX2YDesireYCall__Inputs {
  _call: SwapX2YDesireYCall;

  constructor(call: SwapX2YDesireYCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get desireY(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lowPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapX2YDesireYCall__Outputs {
  _call: SwapX2YDesireYCall;

  constructor(call: SwapX2YDesireYCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapY2XCall extends ethereum.Call {
  get inputs(): SwapY2XCall__Inputs {
    return new SwapY2XCall__Inputs(this);
  }

  get outputs(): SwapY2XCall__Outputs {
    return new SwapY2XCall__Outputs(this);
  }
}

export class SwapY2XCall__Inputs {
  _call: SwapY2XCall;

  constructor(call: SwapY2XCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get highPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapY2XCall__Outputs {
  _call: SwapY2XCall;

  constructor(call: SwapY2XCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapY2XDesireXCall extends ethereum.Call {
  get inputs(): SwapY2XDesireXCall__Inputs {
    return new SwapY2XDesireXCall__Inputs(this);
  }

  get outputs(): SwapY2XDesireXCall__Outputs {
    return new SwapY2XDesireXCall__Outputs(this);
  }
}

export class SwapY2XDesireXCall__Inputs {
  _call: SwapY2XDesireXCall;

  constructor(call: SwapY2XDesireXCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get desireX(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get highPt(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapY2XDesireXCall__Outputs {
  _call: SwapY2XDesireXCall;

  constructor(call: SwapY2XDesireXCall) {
    this._call = call;
  }

  get amountX(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountY(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}
